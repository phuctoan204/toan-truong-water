using System;
using System.Linq;
using System.Web.Mvc;
using WebBanHangOnline.Models.EF;
using System.Text.RegularExpressions;
using WebBanHangOnline.Models;
using System.Collections.Generic;
using System.Text;

namespace WebBanHangOnline.Controllers
{
    public class ChatbotController : Controller
    {
        private readonly ApplicationDbContext db = new ApplicationDbContext();

        public ActionResult Index()
        {
            return View();
        }

        [HttpPost]
        public JsonResult GetResponse(string message)
        {
            try
            {
                message = NormalizeText(message.ToLower().Trim());

                // Ki·ªÉm tra c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m b√°n ch·∫°y
                if (message.Contains("b√°n ch·∫°y") || message.Contains("hot") || message.Contains("nhi·ªÅu") || message.Contains("top"))
                {
                    var topProducts = db.Products
                        .OrderByDescending(p => p.ViewCount)
                        .Take(3)
                        .Select(p => new
                        {
                            Name = p.Title,
                            Link = "/chi-tiet/" + p.Alias + "-p" + p.Id,
                            Price = p.Price,
                            Image = p.ProductImage.FirstOrDefault().Image,
                            Id = p.Id
                        })
                        .ToList();

                    if (topProducts.Any())
                    {
                        string response = "üî• ƒê√¢y l√† 3 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t c·ªßa ch√∫ng t√¥i:\n\n";
                        foreach (var product in topProducts)
                        {
                            response += $"üì¶ {product.Name}\n";
                            response += $"üí∞ Gi√°: {product.Price:0,0}ƒë\n";
                            response += $"üîó <a href='{product.Link}' target='_blank'>Xem chi ti·∫øt s·∫£n ph·∫©m</a>\n";
                            response += "----------------------------------------\n\n";
                        }
                        return Json(new { success = true, message = response, isHtml = true });
                    }
                }

                // T√¨m c√¢u tr·∫£ l·ªùi t·ª´ database v·ªõi ƒë·ªô t∆∞∆°ng ƒë·ªìng cao nh·∫•t
                var bestMatch = db.ChatMessages
                    .Where(x => x.IsActive)
                    .AsEnumerable() // Chuy·ªÉn v·ªÅ x·ª≠ l√Ω trong memory ƒë·ªÉ c√≥ th·ªÉ normalize text
                    .Select(x => new
                    {
                        Message = x,
                        Similarity = CalculateSimilarity(message, NormalizeText(x.Question.ToLower()))
                    })
                    .OrderByDescending(x => x.Similarity)
                    .FirstOrDefault();

                if (bestMatch != null && bestMatch.Similarity >= 0.3) // Gi·∫£m ng∆∞·ª°ng xu·ªëng 30%
                {
                    return Json(new { success = true, message = bestMatch.Message.Answer });
                }

                // N·∫øu kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi ph√π h·ª£p
                return Json(new
                {
                    success = true,
                    message = "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ:\n" +
                             "1. ƒê·∫∑t c√¢u h·ªèi ng·∫Øn g·ªçn h∆°n\n" +
                             "2. S·ª≠ d·ª•ng t·ª´ kh√≥a ch√≠nh x√°c h∆°n\n" +
                             "3. Ho·∫∑c li√™n h·ªá v·ªõi nh√¢n vi√™n h·ªó tr·ª£ ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt"
                });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = "C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau." });
            }
        }

        private string NormalizeText(string text)
        {
            if (string.IsNullOrEmpty(text))
                return string.Empty;

            // Chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng v√† b·ªè d·∫•u c√°ch th·ª´a
            text = text.ToLower().Trim();
            
            // Chu·∫©n h√≥a Unicode v√† d·∫•u thanh
            text = RemoveDiacritics(text);
            
            // Lo·∫°i b·ªè d·∫•u c√¢u v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
            text = Regex.Replace(text, @"[.,!?;:""'()]", "");
            
            // Lo·∫°i b·ªè t·ª´ kh√¥ng c·∫ßn thi·∫øt
            var stopWords = new[] { 
                "cho", "toi", "t√¥i", "hoi", "h·ªèi", "ve", "v·ªÅ", "van de", "v·∫•n ƒë·ªÅ", 
                "cai", "c√°i", "nay", "n√†y", "la", "l√†", "gi", "g√¨", "the", "th·∫ø", 
                "nao", "n√†o", "voi", "v·ªõi", "duoc", "ƒë∆∞·ª£c", "khong", "kh√¥ng",
                "biet", "bi·∫øt", "muon", "mu·ªën", "can", "c·∫ßn", "hay", "hoac", "ho·∫∑c"
            };
            
            foreach (var word in stopWords)
            {
                text = Regex.Replace(text, $@"\b{word}\b", "", RegexOptions.IgnoreCase);
            }
            
            // Chu·∫©n h√≥a kho·∫£ng tr·∫Øng
            text = Regex.Replace(text, @"\s+", " ").Trim();
            
            return text;
        }

        private string RemoveDiacritics(string text)
        {
            var normalizedString = text.Normalize(NormalizationForm.FormD);
            var stringBuilder = new StringBuilder();

            foreach (var c in normalizedString)
            {
                var unicodeCategory = System.Globalization.CharUnicodeInfo.GetUnicodeCategory(c);
                if (unicodeCategory != System.Globalization.UnicodeCategory.NonSpacingMark)
                {
                    stringBuilder.Append(c);
                }
            }

            return stringBuilder.ToString().Normalize(NormalizationForm.FormC);
        }

        private double CalculateSimilarity(string s1, string s2)
        {
            if (string.IsNullOrEmpty(s1) || string.IsNullOrEmpty(s2))
                return 0;

            // T√°ch th√†nh c√°c t·ª´
            var words1 = s1.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
            var words2 = s2.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

            // T√≠nh s·ªë t·ª´ gi·ªëng nhau (bao g·ªìm c·∫£ t·ª´ g·∫ßn gi·ªëng)
            int commonWords = 0;
            foreach (var w1 in words1)
            {
                foreach (var w2 in words2)
                {
                    if (w1.Length > 1 && w2.Length > 1) // Gi·∫£m ƒë·ªô d√†i t·ªëi thi·ªÉu xu·ªëng 2 k√Ω t·ª±
                    {
                        // So s√°nh c·∫£ t·ª´ g·ªëc v√† t·ª´ ƒë√£ b·ªè d·∫•u
                        if (w2.Contains(w1) || w1.Contains(w2) || 
                            RemoveDiacritics(w2).Contains(RemoveDiacritics(w1)) || 
                            RemoveDiacritics(w1).Contains(RemoveDiacritics(w2)) ||
                            LevenshteinDistance(w1, w2) <= 2)
                        {
                            commonWords++;
                            break;
                        }
                    }
                }
            }

            // T√≠nh ƒëi·ªÉm d·ª±a tr√™n t·ª∑ l·ªá t·ª´ gi·ªëng nhau v√† ƒë·ªô d√†i c√¢u
            double lengthScore = 1.0 - Math.Abs(words1.Length - words2.Length) / (double)Math.Max(words1.Length, words2.Length);
            double wordScore = (double)commonWords / Math.Max(words1.Length, words2.Length);

            return (wordScore * 0.8 + lengthScore * 0.2); // TƒÉng tr·ªçng s·ªë cho t·ª´ gi·ªëng nhau
        }

        private int LevenshteinDistance(string s1, string s2)
        {
            int[,] d = new int[s1.Length + 1, s2.Length + 1];

            for (int i = 0; i <= s1.Length; i++)
                d[i, 0] = i;
            for (int j = 0; j <= s2.Length; j++)
                d[0, j] = j;

            for (int i = 1; i <= s1.Length; i++)
            {
                for (int j = 1; j <= s2.Length; j++)
                {
                    int cost = (s1[i - 1] == s2[j - 1]) ? 0 : 1;
                    d[i, j] = Math.Min(Math.Min(
                        d[i - 1, j] + 1,      // Deletion
                        d[i, j - 1] + 1),     // Insertion
                        d[i - 1, j - 1] + cost); // Substitution
                }
            }

            return d[s1.Length, s2.Length];
        }
    }
} 